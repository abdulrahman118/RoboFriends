{"version":3,"sources":["components/Card.js","components/CradList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","_ref","id","name","email","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","robot","components_Card","key","SearchBox","onSearchChange","onChange","type","placeholder","Scroll","props","style","overflowY","height","border","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","event","setState","searchField","target","value","state","_this2","fetch","then","response","json","_this$state","filteredRobots","filter","toLowerCase","includes","length","components_SearchBox","src_components_Scroll","CradList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8OAeeA,EAbF,SAAAC,GAAqB,IAAnBC,EAAmBD,EAAnBC,GAAGC,EAAgBF,EAAhBE,KAAKC,EAAWH,EAAXG,MACnB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uDACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,QAAQC,IAAG,wBAAAC,OAA0BT,EAA1B,mBACxBG,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAKJ,GACLE,EAAAC,EAAAC,cAAA,SAAIH,MCYDQ,EAhBE,SAAAX,GAAa,IAAXY,EAAWZ,EAAXY,OACf,OACAR,EAAAC,EAAAC,cAAA,WAEWM,EAAOC,IAAI,SAAAC,GAAK,OACfV,EAAAC,EAAAC,cAACS,EAAD,CACAC,IAAKF,EAAMb,GACXA,GAAIa,EAAMb,GACVC,KAAMY,EAAMZ,KACZC,MAAOW,EAAMX,YCEdc,EAbG,SAAAjB,GAAqB,IAAnBkB,EAAmBlB,EAAnBkB,eAChB,OACId,EAAAC,EAAAC,cAAA,OAAMC,UAAU,OACZH,EAAAC,EAAAC,cAAA,SACAC,UAAU,mCACVY,SAAUD,EACVE,KAAK,QACLC,YAAY,yBCETC,SARA,SAACC,GACZ,OACInB,EAAAC,EAAAC,cAAA,OAAKkB,MAAO,CAACC,UAAU,SAAUC,OAAO,QAAQC,OAAO,cAClDJ,EAAMK,YCyCJC,qBAxCX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAaJf,eAAiB,SAACmB,GACdP,EAAKQ,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAbzCX,EAAKY,MAAQ,CACT9B,OAAS,GACT2B,YAAc,IAJRT,mFAQK,IAAAa,EAAAV,KACfW,MAAM,8CACDC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIJ,EAAKL,SAAS,SAAAI,GAAK,OAAIA,EAAM9B,OAASmC,uCAOpD,IAAAC,EAE2Bf,KAAKS,MAA7B9B,EAFHoC,EAEGpC,OAAQ2B,EAFXS,EAEWT,YACTU,EAAiBrC,EAAOsC,OAAO,SAAApC,GAAK,OACtCA,EAAMZ,KAAKiD,cAAcC,SAASb,EAAYY,iBAGlD,OAAQvC,EAAOyC,OAGXjD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACXH,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAACgD,EAAD,CAAWpC,eAAgBe,KAAKf,iBAChCd,EAAAC,EAAAC,cAACiD,EAAD,KACInD,EAAAC,EAAAC,cAACkD,EAAD,CAAU5C,OAAQqC,MAN9B7C,EAAAC,EAAAC,cAAA,iCA3BUmD,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECVNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAAQC,SAASC,eAAe,SDyH1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.bd463864.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({id,name,email}) => {\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robot' src={`https://robohash.org/${id}?size=200x200`} />\r\n        <div>\r\n            <h2>{name}</h2>\r\n            <p>{email}</p>\r\n        </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({robots}) =>{   \r\n    return (\r\n    <div>\r\n            {                                       \r\n               robots.map(robot =>\r\n                <Card \r\n                key={robot.id} \r\n                id={robot.id} \r\n                name={robot.name} \r\n                email={robot.email} />\r\n                ) \r\n            }\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({onSearchChange}) =>{\r\n    return (\r\n        <div  className='pa2'>\r\n            <input \r\n            className='pa3 ba b--green bg-lightest-blue'\r\n            onChange={onSearchChange} \r\n            type='seach' \r\n            placeholder='search Robofriends'/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\nimport './Scroll.css'\r\n\r\nconst Scroll = (props) =>{\r\n    return (\r\n        <div style={{overflowY:'scroll', height:'500px',border:'5px solid'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React,{Component} from 'react';\r\nimport CardList from '../components/CradList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css'\r\n\r\nclass App extends Component{\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            robots : [],\r\n            searchField : ''\r\n        };        \r\n    }\r\n\r\n    componentDidMount(){        \r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(json => this.setState(state => state.robots = json));\r\n    }\r\n\r\n    onSearchChange = (event) =>{\r\n        this.setState({searchField: event.target.value});\r\n    }\r\n\r\n    render(){        \r\n\r\n       const { robots, searchField } = this.state;\r\n        const filteredRobots = robots.filter(robot => \r\n            robot.name.toLowerCase().includes(searchField.toLowerCase()));\r\n            \r\n\r\n        return !robots.length ? \r\n        <h1>Loading. . .</h1> :\r\n        (\r\n            <div className='tc'>\r\n                <h1>Robo Friends</h1>\r\n                <SearchBox onSearchChange={this.onSearchChange}/>\r\n                <Scroll >\r\n                    <CardList robots={filteredRobots} />\r\n                </Scroll>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}