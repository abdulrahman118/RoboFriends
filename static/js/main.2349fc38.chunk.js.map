{"version":3,"sources":["reducer.js","components/Card.js","components/CradList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","isPending","robots","error","Card","id","name","email","className","alt","src","CardList","map","robot","key","SearchBox","onSearchChange","onChange","type","placeholder","aria-label","Scroll","props","style","overflowY","height","border","children","App","this","onRequestRobots","filteredRobots","filter","toLowerCase","includes","Component","connect","state","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleWare","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2349fc38.chunk.js","sourcesContent":["import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants';\r\n\r\nconst initialStateSearch = {\r\n    searchField : ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) =>{    \r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, { searchField : action.payload });\r\n    \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots : [],\r\n    error : ''\r\n} \r\n\r\nexport const requestRobots = (state = initialStateRobots, action ={}) =>{\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING:            \r\n            return Object.assign({}, state, { isPending : true });\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots : action.payload, isPending : false });\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error : action.payload, isPending : false});\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\n\r\nconst Card = ({id,name,email}) => {\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robot' src={`https://robohash.org/${id}?size=200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({robots}) =>{   \r\n    return (\r\n    <div>\r\n            {                                       \r\n               robots.map(robot =>\r\n                <Card \r\n                key={robot.id} \r\n                id={robot.id} \r\n                name={robot.name} \r\n                email={robot.email} />\r\n                ) \r\n            }\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({onSearchChange}) =>{\r\n    return (\r\n        <div  className='pa2'>\r\n            <input            \r\n            className='pa3 ba b--green bg-lightest-blue'\r\n            onChange={onSearchChange} \r\n            type='seach' \r\n            placeholder='search Robofriends'\r\n            aria-label='Search Robots'/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\nimport './Scroll.css'\r\n\r\nconst Scroll = (props) =>{\r\n    return (\r\n        <div style={{overflowY:'scroll', height:'500px',border:'5px solid'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CradList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css'\r\n\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nconst mapStateToProps = state => ({\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n});\r\n\r\nclass App extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.onRequestRobots()\r\n    }\r\n\r\n    render() {\r\n        const { searchField, onSearchChange, robots, isPending } = this.props;\r\n        const filteredRobots = robots.filter(robot =>\r\n            robot.name.toLowerCase().includes(searchField.toLowerCase()));\r\n\r\n\r\n        return isPending ?\r\n            <h1>Loading. . .</h1> :\r\n            (\r\n                <div className='tc'>\r\n                    <h1>Robo Friends</h1>\r\n                    <SearchBox onSearchChange={onSearchChange} />\r\n                    <Scroll >\r\n                        <CardList robots={filteredRobots} />\r\n                    </Scroll>\r\n                </div>\r\n            )\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED} from './constants';\r\n\r\nexport const setSearchField = (text) => ({ type: CHANGE_SEARCH_FIELD, payload : text});\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type : REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload : data}))\r\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload : error}));\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { searchRobots, requestRobots } from './reducer';\nimport { createLogger} from 'redux-logger';\nimport thunkMiddleWare from 'redux-thunk'; \nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleWare, logger));\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}