{"version":3,"sources":["reducer.js","components/Card.js","components/CradList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","isPending","robots","error","Card","_ref","id","name","email","react_default","a","createElement","className","alt","src","concat","CardList","map","robot","components_Card","key","SearchBox","onSearchChange","onChange","type","placeholder","Scroll","props","style","overflowY","height","border","children","App","this","onRequestRobots","_this$props","filteredRobots","filter","toLowerCase","includes","components_SearchBox","src_components_Scroll","CradList","Component","connect","state","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleWare","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c634888c.chunk.js","sourcesContent":["import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants';\r\n\r\nconst initialStateSearch = {\r\n    searchField : ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) =>{    \r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, { searchField : action.payload });\r\n    \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots : [],\r\n    error : ''\r\n} \r\n\r\nexport const requestRobots = (state = initialStateRobots, action ={}) =>{\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING:            \r\n            return Object.assign({}, state, { isPending : true });\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots : action.payload, isPending : false });\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error : action.payload, isPending : false});\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\n\r\nconst Card = ({id,name,email}) => {\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robot' src={`https://robohash.org/${id}?size=200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({robots}) =>{   \r\n    return (\r\n    <div>\r\n            {                                       \r\n               robots.map(robot =>\r\n                <Card \r\n                key={robot.id} \r\n                id={robot.id} \r\n                name={robot.name} \r\n                email={robot.email} />\r\n                ) \r\n            }\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({onSearchChange}) =>{\r\n    return (\r\n        <div  className='pa2'>\r\n            <input \r\n            className='pa3 ba b--green bg-lightest-blue'\r\n            onChange={onSearchChange} \r\n            type='seach' \r\n            placeholder='search Robofriends'/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\nimport './Scroll.css'\r\n\r\nconst Scroll = (props) =>{\r\n    return (\r\n        <div style={{overflowY:'scroll', height:'500px',border:'5px solid'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React,{Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CradList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css'\r\n\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nconst mapStateToProps = state => ({ searchField : state.searchRobots.searchField,\r\n                                    robots : state.requestRobots.robots,\r\n                                    isPending: state.requestRobots.isPending,\r\n                                    error : state.requestRobots.error\r\n                                  });\r\n\r\nconst mapDispatchToProps = dispatch => ({ onSearchChange : event => dispatch(setSearchField(event.target.value)),\r\n                                          onRequestRobots: () => dispatch(requestRobots())\r\n                                        });\r\n\r\nclass App extends Component{\r\n    \r\n    componentDidMount(){        \r\n        this.props.onRequestRobots()\r\n    }\r\n    \r\n    render(){                      \r\n        const { searchField, onSearchChange, robots, isPending } = this.props;\r\n        const filteredRobots = robots.filter(robot => \r\n            robot.name.toLowerCase().includes(searchField.toLowerCase()));\r\n            \r\n\r\n        return isPending ? \r\n        <h1>Loading. . .</h1> :\r\n        (\r\n            <div className='tc'>\r\n                <h1>Robo Friends</h1>\r\n                <SearchBox onSearchChange={onSearchChange}/>\r\n                <Scroll >\r\n                    <CardList robots={filteredRobots} />\r\n                </Scroll>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED} from './constants';\r\n\r\nexport const setSearchField = (text) => ({ type: CHANGE_SEARCH_FIELD, payload : text});\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type : REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload : data}))\r\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload : error}));\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { searchRobots, requestRobots } from './reducer';\nimport { createLogger} from 'redux-logger';\nimport thunkMiddleWare from 'redux-thunk'; \nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleWare, logger));\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}